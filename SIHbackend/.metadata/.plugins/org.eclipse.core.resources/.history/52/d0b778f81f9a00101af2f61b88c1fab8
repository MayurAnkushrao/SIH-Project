package com.sih.SIHbackend.entity;

import java.math.BigDecimal;
import java.math.RoundingMode;  // ✅ Add this import
import java.time.LocalDateTime;

import org.hibernate.annotations.CreationTimestamp;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "sentiment_analysis")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SentimentAnalysis {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "post_id", nullable = false)
    private Post post;
    
    @Column(name = "total_comments")
    private Integer totalComments = 0;
    
    @Column(name = "positive_count")
    private Integer positiveCount = 0;
    
    @Column(name = "negative_count")
    private Integer negativeCount = 0;
    
    @Column(name = "neutral_count")
    private Integer neutralCount = 0;
    
    @Column(name = "positive_percentage", precision = 5, scale = 2)
    private BigDecimal positivePercentage = BigDecimal.ZERO;
    
    @Column(name = "negative_percentage", precision = 5, scale = 2)
    private BigDecimal negativePercentage = BigDecimal.ZERO;
    
    @Column(name = "neutral_percentage", precision = 5, scale = 2)
    private BigDecimal neutralPercentage = BigDecimal.ZERO;
    
    @Lob
    private String summary;
    
    @Lob
    private String keywords;
    
    @CreationTimestamp
    @Column(name = "analyzed_at")
    private LocalDateTime analyzedAt;
    
    // Constructor with Post
    public SentimentAnalysis(Post post, Integer totalComments) {
        this.post = post;
        this.totalComments = totalComments;
        this.analyzedAt = LocalDateTime.now();
    }
    
    // ✅ Fixed: Utility method to calculate percentages using RoundingMode enum
    public void calculatePercentages() {
        if (totalComments > 0) {
            BigDecimal total = new BigDecimal(totalComments);
            this.positivePercentage = new BigDecimal(positiveCount)
                .multiply(new BigDecimal("100"))
                .divide(total, 2, RoundingMode.HALF_UP);
            this.negativePercentage = new BigDecimal(negativeCount)
                .multiply(new BigDecimal("100"))
                .divide(total, 2, RoundingMode.HALF_UP);
            this.neutralPercentage = new BigDecimal(neutralCount)
                .multiply(new BigDecimal("100"))
                .divide(total, 2, RoundingMode.HALF_UP);
        }
    }
    
    // Convenience method to get post ID
    public Long getPostId() {
        return post != null ? post.getId() : null;
    }
    
    // Additional utility method for better percentage calculation with validation
    public void calculateAndValidatePercentages() {
        calculatePercentages();
        
        // Ensure percentages sum to approximately 100% (allowing for rounding)
        BigDecimal sum = positivePercentage.add(negativePercentage).add(neutralPercentage);
        if (sum.compareTo(new BigDecimal("100.00")) != 0 && totalComments > 0) {
            // Adjust the largest percentage to make sum exactly 100%
            adjustPercentagesToSum100();
        }
    }
    
    private void adjustPercentagesToSum100() {
        BigDecimal currentSum = positivePercentage.add(negativePercentage).add(neutralPercentage);
        BigDecimal difference = new BigDecimal("100.00").subtract(currentSum);
        
        // Find the largest percentage and adjust it
        if (positivePercentage.compareTo(negativePercentage) >= 0 && 
            positivePercentage.compareTo(neutralPercentage) >= 0) {
            this.positivePercentage = positivePercentage.add(difference);
        } else if (negativePercentage.compareTo(neutralPercentage) >= 0) {
            this.negativePercentage = negativePercentage.add(difference);
        } else {
            this.neutralPercentage = neutralPercentage.add(difference);
        }
    }

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Post getPost() {
		return post;
	}

	public void setPost(Post post) {
		this.post = post;
	}

	public Integer getTotalComments() {
		return totalComments;
	}

	public void setTotalComments(Integer totalComments) {
		this.totalComments = totalComments;
	}

	public Integer getPositiveCount() {
		return positiveCount;
	}

	public void setPositiveCount(Integer positiveCount) {
		this.positiveCount = positiveCount;
	}

	public Integer getNegativeCount() {
		return negativeCount;
	}

	public void setNegativeCount(Integer negativeCount) {
		this.negativeCount = negativeCount;
	}

	public Integer getNeutralCount() {
		return neutralCount;
	}

	public void setNeutralCount(Integer neutralCount) {
		this.neutralCount = neutralCount;
	}

	public BigDecimal getPositivePercentage() {
		return positivePercentage;
	}

	public void setPositivePercentage(BigDecimal positivePercentage) {
		this.positivePercentage = positivePercentage;
	}

	public BigDecimal getNegativePercentage() {
		return negativePercentage;
	}

	public void setNegativePercentage(BigDecimal negativePercentage) {
		this.negativePercentage = negativePercentage;
	}

	public BigDecimal getNeutralPercentage() {
		return neutralPercentage;
	}

	public void setNeutralPercentage(BigDecimal neutralPercentage) {
		this.neutralPercentage = neutralPercentage;
	}

	public String getSummary() {
		return summary;
	}

	public void setSummary(String summary) {
		this.summary = summary;
	}

	public String getKeywords() {
		return keywords;
	}

	public void setKeywords(String keywords) {
		this.keywords = keywords;
	}

	public LocalDateTime getAnalyzedAt() {
		return analyzedAt;
	}

	public void setAnalyzedAt(LocalDateTime analyzedAt) {
		this.analyzedAt = analyzedAt;
	}
    
    
}
