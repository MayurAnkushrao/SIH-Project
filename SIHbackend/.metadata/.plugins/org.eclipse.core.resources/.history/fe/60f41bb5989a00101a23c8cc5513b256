package com.sih.SIHbackend.controller;
/*
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sih.SIHbackend.dto.request.LoginRequest;
import com.sih.SIHbackend.dto.request.RegisterRequest;
import com.sih.SIHbackend.dto.response.AuthResponse;
import com.sih.SIHbackend.service.AuthService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@Validated
public class AuthController {
    
    @Autowired
    private AuthService authService;
    
    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest request) {
        try {
            AuthResponse response = authService.login(request);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            AuthResponse errorResponse = new AuthResponse(
                null, null, null, null, null, null, e.getMessage()
            );
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        } catch (Exception e) {
            AuthResponse errorResponse = new AuthResponse(
                null, null, null, null, null, null, "Authentication failed: " + e.getMessage()
            );
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    
    @PostMapping("/register")
    public ResponseEntity<AuthResponse> register(@Valid @RequestBody RegisterRequest request) {
        try {
            AuthResponse response = authService.register(request);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            AuthResponse errorResponse = new AuthResponse(
                null, null, null, null, null, null, e.getMessage()
            );
            HttpStatus status = e.getMessage().contains("already registered") ? 
                HttpStatus.CONFLICT : HttpStatus.BAD_REQUEST;
            return ResponseEntity.status(status).body(errorResponse);
        } catch (Exception e) {
            AuthResponse errorResponse = new AuthResponse(
                null, null, null, null, null, null, "Registration failed: " + e.getMessage()
            );
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    
    @PostMapping("/logout")
    public ResponseEntity<?> logout(HttpServletRequest request) {
        try {
            authService.logout();
            return ResponseEntity.ok().body(new LogoutResponse("Logout successful", true));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new LogoutResponse("Logout failed: " + e.getMessage(), false));
        }
    }
    
    // Inner class for logout response
    public static class LogoutResponse {
        private String message;
        private boolean success;
        
        public LogoutResponse(String message, boolean success) {
            this.message = message;
            this.success = success;
        }
        
        // Getters and setters
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
        public boolean isSuccess() { return success; }
        public void setSuccess(boolean success) { this.success = success; }
    }
}*/
/*

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.sih.SIHbackend.dto.request.LoginRequest;
import com.sih.SIHbackend.dto.request.RegisterRequest;
import com.sih.SIHbackend.dto.response.AuthResponse;
import com.sih.SIHbackend.service.AuthService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@Validated
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/login")
    public ResponseEntity<AuthResponse> loginUser(@Valid @RequestBody LoginRequest loginRequest) {
        AuthResponse response = authService.login(loginRequest);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/register")
    public ResponseEntity<AuthResponse> registerUser(@Valid @RequestBody RegisterRequest registerRequest) {
        AuthResponse response = authService.register(registerRequest);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/logout")
    public ResponseEntity<AuthResponse> logoutUser() {
        AuthResponse response = authService.logout();
        return ResponseEntity.ok(response);
    }
}
*/

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.sih.SIHbackend.dto.request.LoginRequest;
import com.sih.SIHbackend.dto.request.RegisterRequest;
import com.sih.SIHbackend.dto.response.AuthResponse;
import com.sih.SIHbackend.service.AuthService;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@Validated
public class AuthController {

    @Autowired
    private AuthService authService;
    private final ObjectMapper objectMapper = new ObjectMapper();
    @PostMapping(value = "/login", consumes = {"application/json", "text/plain"})
    public ResponseEntity<AuthResponse> loginUser(
            @Valid @RequestBody LoginRequest loginRequest) {
        AuthResponse response = authService.login(loginRequest);
        return ResponseEntity.ok(response);
    }

    @PostMapping(value = "/register", consumes = {"application/json", "text/plain"})
    public ResponseEntity<AuthResponse> registerUser(@RequestBody String body) {
        try {
            RegisterRequest registerRequest = objectMapper.readValue(body, RegisterRequest.class);
            AuthResponse response = authService.register(registerRequest);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            AuthResponse errorResponse = new AuthResponse(
                null, null, null, null, null, null, "Registration failed: " + e.getMessage()
            );
            return ResponseEntity.status(400).body(errorResponse);
        }
    }
    @PostMapping("/logout")
    public ResponseEntity<AuthResponse> logoutUser() {
        AuthResponse response = authService.logout();
        return ResponseEntity.ok(response);
    }
}

